{"version":3,"sources":["utils.ts","Brew/Brew.tsx","Controls/Controls.tsx","Color/Color.tsx","Temperature/Temperature.tsx","Timer/Timer.tsx","Name/Name.tsx","Overlay/Overlay.tsx","Weight/Weight.tsx","Water/Water.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseAmountInput","max","e","val","parseInt","currentTarget","value","console","debug","x","last","toString","split","pop","wrap","cls","classes","join","Brew","brew","setBrew","selected","setSelected","isTicking","number","className","onClick","Controls","colorClass","name","color","Color","_setColor","setColor","Temperature","temperature","setTemperature","isCelsius","setIsCelsius","fClasses","cClasses","type","onChange","values","map","c","i","Timer","minutes","setMinutes","seconds","setSeconds","$min","$sec","Name","setName","useState","start","setStart","Overlay","isDone","isOut","setIsOut","setTime","lastTime","overlayClasses","Weight","weight","setWeight","isMass","setIsMass","tspClasses","gClasses","Water","water","setWater","ozClasses","App","isMassWeight","setIsMassWeight","isMassWater","setIsMassWater","_setBrew","setIsTicking","setIsDone","setLastTime","useEffect","timer","setTimeout","clearTimeout","count","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c52a3c2a.chunk.js","sourcesContent":["\nexport const rand0 = (upper: number) => Math.floor(Math.random() * upper);\n\n\nexport const wrap = (max: number, x: number) => {\n    const chars = x.toString().split('');\n    const last = chars.pop() || '0';\n    console.debug(last);\n    return parseInt(last, 10);\n}\n\nexport const parseAmountInput = (max: number, e: any) => {\n    const val = parseInt(e.currentTarget.value, 10) || 0;\n    console.debug(val);\n    return val > max ? wrap(max, val) : val;\n}\n\nexport const cls = (classes: string[]): string => classes.join(' ');","import React from 'react';\nimport { cls } from '../utils';\nimport './Brew.scss';\n\ninterface BrewProps {\n    brew: number;\n    setBrew: any;\n    selected: string\n    setSelected: any\n    isTicking: boolean\n}\n\nexport const Brew = ({ brew, setBrew, selected, setSelected, isTicking }: BrewProps) => {\n    const classes = cls([\n        'brew',\n        selected === 'brew' ? 'selected' : '',\n    ]);\n    const number = `number-${brew}`;\n    const onClick = () => {\n        if (!isTicking) {\n            setSelected('brew');\n            setBrew(++brew);\n        }\n    }\n    return (\n        <section className={classes}>\n            <button onClick={onClick}>\n                <div className=\"text\">\n                    <label>Brew</label>\n                    <h2 className={'count ' + number}>{brew}</h2>\n                </div>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Controls.scss';\n\nexport const Controls = () => {\n    return (\n        <section className=\"controls\">\n            <button>\n                <span> old </span>\n            </button>\n            <button>\n                <span> new </span>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Color.scss'\n\ninterface ColorProps {\n    color: string\n    setColor: any\n    selected: string\n    setSelected: any\n}\n\nconst colorClass = (name: string, color: string) => cls([\n    'f-cc',\n    name,\n    name === color ? 'active' : ''\n]);\n\n\n\nexport const Color = ({ color, setColor: _setColor, selected, setSelected }: ColorProps) => {\n    const classes = cls([\n        'color',\n        //selected === 'color' ? 'selected' : '',\n    ]);\n    const setColor = (color: string) => {\n        setSelected('color');\n        _setColor(color);\n    }\n    return (\n        <section className={classes} >\n            <button className={colorClass('black', color)} onClick={() => setColor('black')} >\n                <span className=\"text\">\n                    Black\n                </span>\n            </button>\n            <button className={colorClass('oolong', color)} onClick={() => setColor('oolong')}>\n                <span className=\"text\">\n                    <span className=\"olong\">\n                        {/* <span className=\"big-O\">\n                            O\n                        <span className=\"o\">o</span>\n                        </span>\n                        long */}\n                        <span className=\"oo\">Oo</span>long\n                    </span>\n                </span>\n            </button>\n            <button className={colorClass('green', color)} onClick={() => setColor('green')}>\n                <span className=\"text\">\n                    Green\n                </span>\n            </button>\n            <button className={colorClass('white', color)} onClick={() => setColor('white')}>\n                <span className=\"text\">\n                    White\n                </span>\n            </button>\n        </section>\n    );\n}\n\n","import React from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Temperature.scss';\n\ninterface temperatureProps {\n    temperature: number\n    setTemperature: any\n    isCelsius: boolean\n    setIsCelsius: any\n    selected: string\n    setSelected: any\n}\n\nexport const Temperature = ({ temperature, setTemperature, isCelsius, setIsCelsius, selected, setSelected }: temperatureProps) => {\n    const fClasses = cls([\n        'amount-label',\n        'fahrenheit',\n        isCelsius ? '' : 'active',\n    ]);\n    const cClasses = cls([\n        'amount-label',\n        'celsius',\n        isCelsius ? 'active' : '',\n    ]);\n    const classes = cls([\n        'temperature',\n        selected === 'temperature' ? 'selected' : '',\n    ]);\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--temperature\"\n                value={temperature}\n                onClick={() => setSelected('temperature')}\n                onChange={(e) => setTemperature(parseAmountInput(212, e))} />\n            <div className=\"value\">\n                <div className=\"circle\">\n                    <h2 className=\"amount\">{temperature}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={fClasses} onClick={() => setIsCelsius(false)}>°F</button>\n                <button className={cClasses} onClick={() => setIsCelsius(true)}>°C</button>\n            </div>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Timer.scss'\n\n\nconst values = (x: number) => {\n    x = x < 0 ? 0 : x;\n    const str = x < 10 ? `0${x}` : `${x}`;\n    return str\n        .split('')\n        .map((c: string, i: number) => (\n            <h2 key={`${i}-${c}`} className=\"value\">{c}</h2>\n        ));\n}\n\ninterface TimerProps {\n    minutes: number\n    seconds: number\n    setMinutes: any\n    setSeconds: any\n    selected: string\n    setSelected: any\n}\n\nexport const Timer = ({ minutes, setMinutes, seconds, setSeconds, selected, setSelected }: TimerProps) => {\n    const $min = values(minutes);\n    const $sec = values(seconds);\n    const classes = cls([\n        'timer',\n        selected === 'timer' ? 'selected' : ''\n    ])\n    return (\n        <section className={classes} >\n            <section className=\"capsule min\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={minutes}\n                    onClick={(e) => setSelected('timer')}\n                    onChange={(e) => setMinutes(parseAmountInput(9, e))} />\n                <label className=\"label\">\n                    min\n                </label>\n                <div className=\"values\">\n                    {$min}\n                </div>\n            </section>\n\n            <section className=\"capsule sec\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={seconds}\n                    onClick={(e) => setSelected('timer')}\n                    onChange={(e) => setSeconds(parseAmountInput(59, e))} />\n                <label className=\"label\">\n                    sec\n                </label>\n                <div className=\"values\">\n                    {$sec}\n                </div>\n            </section>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls } from '../utils';\nimport './Name.scss';\n\ninterface NameProps {\n    name: string,\n    setName: any,\n    selected: string\n    setSelected: any\n}\n\nexport const Name = ({ name, setName, selected, setSelected }: NameProps) => {\n    const [start, setStart] = useState(true);\n    const classes = cls([\n        'f-cc',\n        'name',\n        selected === 'name' ? 'selected' : '',\n        start ? 'start' : ''\n    ]);\n\n    return (\n        <section className={classes}>\n            <input\n                type=\"text\"\n                className=\"input--text\"\n                onClick={() => setSelected('name')}\n                onChange={(e) => {\n                    setStart(false);\n                    setName(e.currentTarget.value)\n                }} />\n            <h1 className=\"name__name\">{name}</h1>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Overlay.scss';\n\ninterface OverlayProps {\n    isDone: boolean,\n    isOut: boolean,\n    setIsOut: any,\n    setTime: any,\n    lastTime: number\n}\n\nexport const Overlay = ({ isDone, isOut, setIsOut, setTime, lastTime }: OverlayProps) => {\n    const overlayClasses = cls([\n        'overlay',\n        isDone ? 'done' : '',\n        isOut ? 'out' : '',\n    ]);\n    return (\n        <div onClick={() => {\n            setIsOut(true);\n            setTime(lastTime);\n        }} className={overlayClasses}></div>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Weight.scss';\n\ninterface WeightProps {\n    weight: number;\n    setWeight: any;\n    isMass: boolean;\n    setIsMass: any;\n    selected: string;\n    setSelected: any;\n}\n\nexport const Weight = ({ weight, setWeight, isMass, setIsMass, selected, setSelected }: WeightProps) => {\n    const tspClasses = cls([\n        'amount-label',\n        'tsp',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n\n    const classes = cls([\n        'weight',\n        selected === 'weight' ? 'selected' : ''\n    ]);\n\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--weight\"\n                value={weight}\n                onClick={(e) => setSelected('weight')}\n                onChange={(e) => setWeight(parseAmountInput(99, e))} />\n            <div className=\"diamond\">\n                <button className={tspClasses} onClick={() => setIsMass(false)}>tsp</button>\n                <h2 className=\"value\">{weight}</h2>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Water.scss';\n\ninterface WaterProps {\n    water: number\n    setWater: any\n    isMass: boolean\n    setIsMass: any\n    selected: string\n    setSelected: any\n}\n\nexport const Water = ({ water, setWater, isMass, setIsMass, selected, setSelected }: WaterProps) => {\n    const ozClasses = cls([\n        'amount-label',\n        'oz',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    const classes = cls([\n        'water',\n        selected === 'water' ? 'selected' : ''\n    ])\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--water\"\n                value={water}\n                onClick={(e) => setSelected('water')}\n                onChange={(e) => setWater(parseAmountInput(999, e))} />\n            <div className=\"value\">\n                <div className=\"glass\">\n                    <h2 className=\"amount\">{water}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={ozClasses} onClick={() => setIsMass(false)}>oz</button>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useEffect, useState } from 'react';\n\nimport { Brew } from './Brew';\nimport { Controls } from './Controls';\nimport { Color } from './Color';\nimport { Temperature } from './Temperature';\nimport { Timer } from './Timer';\nimport { Name } from './Name';\nimport { Overlay } from './Overlay';\nimport { Weight } from './Weight';\nimport { Water } from './Water';\n\nimport './App.scss';\n\nfunction App() {\n  const [name, setName] = useState('Tea');\n  const [selected, setSelected] = useState('');\n  const [temperature, setTemperature] = useState(0);\n  const [isCelsius, setIsCelsius] = useState(true);\n  const [color, setColor] = useState('');\n  const [weight, setWeight] = useState(0);\n  const [isMassWeight, setIsMassWeight] = useState(true);\n  const [water, setWater] = useState(0);\n  const [isMassWater, setIsMassWater] = useState(true);\n  const [brew, _setBrew] = useState(0);\n  const [isTicking, setIsTicking] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [isOut, setIsOut] = useState(false);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(15);\n  const [lastTime, setLastTime] = useState(seconds);\n\n  const setBrew = (count: number) => {\n    setIsTicking(!isTicking)\n    setIsDone(false);\n    setIsOut(false);\n    setLastTime(seconds + 15);\n    return _setBrew(count);\n  }\n\n  useEffect(() => {\n    if (!isTicking) {\n      return () => { };\n    }\n    const timer = setTimeout(() => {\n      setSeconds(seconds - 1);\n      if (seconds <= 0) {\n        setIsTicking(false);\n        setIsDone(true);\n        setMinutes(0);\n        setSeconds(0);\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n  }, [isTicking, seconds]);\n\n  useEffect(() => {\n    if (isDone && isOut) {\n      setTimeout(() => {\n        setIsDone(false)\n        setSelected('overlay')\n      }, 200);\n    }\n  }, [isDone, isOut]);\n\n\n\n  return (\n    <main >\n      <Controls />\n      <Name selected={selected} setSelected={setSelected} name={name} setName={setName} />\n      <Temperature selected={selected} setSelected={setSelected} temperature={temperature} setTemperature={setTemperature} isCelsius={isCelsius} setIsCelsius={setIsCelsius} />\n      <Color selected={selected} setSelected={setSelected} color={color} setColor={setColor} />\n      <Weight selected={selected} setSelected={setSelected} weight={weight} setWeight={setWeight} isMass={isMassWeight} setIsMass={setIsMassWeight} />\n      <Water selected={selected} setSelected={setSelected} water={water} setWater={setWater} isMass={isMassWater} setIsMass={setIsMassWater} />\n      <Brew selected={selected} setSelected={setSelected} isTicking={isTicking} brew={brew} setBrew={setBrew} />\n      <Timer selected={selected} setSelected={setSelected} minutes={minutes} setMinutes={setMinutes} seconds={seconds} setSeconds={setSeconds} />\n      <Overlay isDone={isDone} isOut={isOut} setIsOut={setIsOut} setTime={setSeconds} lastTime={lastTime} />\n    </main>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}