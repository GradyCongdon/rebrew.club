{"version":3,"sources":["utils.ts","Brew/Brew.tsx","Controls/Controls.tsx","Color/Color.tsx","Temperature/Temperature.tsx","Timer/Timer.tsx","Name/Name.tsx","Overlay/Overlay.tsx","Weight/Weight.tsx","Water/Water.tsx","History/BrewSession.tsx","History/TeaSession.tsx","History/History.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseAmountInput","max","e","val","parseInt","currentTarget","value","console","debug","x","last","toString","split","pop","wrap","cls","classes","join","scrollInput","window","scrollTo","top","getBoundingClientRect","behavior","Brew","brew","setBrew","selected","setSelected","isTicking","number","className","onClick","Controls","onNew","onOld","colorClass","name","color","Color","_setColor","setColor","Temperature","temperature","setTemperature","isCelsius","setIsCelsius","fClasses","cClasses","type","onChange","valueNodes","map","c","i","Timer","time","setTime","min","Math","floor","minSec","sec","$min","$sec","newMin","newSec","Name","setName","useState","start","setStart","placeholder","replace","Overlay","isDone","isOut","setIsOut","lastTime","overlayClasses","Weight","weight","setWeight","isMass","setIsMass","tspClasses","gClasses","Water","water","setWater","ozClasses","BrewSession","brewNumber","mockTeaSession","id","brews","temperatureUnit","waterUnit","mass","massUnit","TeaSession","session","$brews","b","mockHistory","sessions","History","onBack","$entries","App","isMassWeight","setIsMassWeight","isMassWater","setIsMassWater","_setBrew","setIsTicking","setIsDone","setLastTime","autoBrewTime","page","setPage","count","useEffect","timer","setTimeout","clearTimeout","matchMedia","matches","navigator","standalone","document","referrer","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93a00c4a.chunk.js","sourcesContent":["\nexport const rand0 = (upper: number) => Math.floor(Math.random() * upper);\n\n\nexport const wrap = (max: number, x: number) => {\n    const chars = x.toString().split('');\n    const last = chars.pop() || '0';\n    console.debug(last);\n    return parseInt(last, 10);\n}\n\nexport const parseAmountInput = (max: number, e: any) => {\n    const val = parseInt(e.currentTarget.value, 10) || 0;\n    console.debug(val);\n    return val > max ? wrap(max, val) : val;\n}\n\nexport const cls = (classes: string[]): string => classes.join(' ');\n\nexport const scrollInput = (e: any) => {\n    window.scrollTo({\n        top: e.currentTarget.getBoundingClientRect().top,\n        behavior: 'smooth'\n    });\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Brew.scss';\n\ninterface BrewProps {\n    brew: number;\n    setBrew: any;\n    selected: string\n    setSelected: any\n    isTicking: boolean\n}\n\nexport const Brew = ({ brew, setBrew, selected, setSelected, isTicking }: BrewProps) => {\n    const classes = cls([\n        'brew',\n        selected === 'brew' ? 'selected' : '',\n    ]);\n    const number = `number-${brew}`;\n    const onClick = () => {\n        if (!isTicking) {\n            setSelected('brew');\n            setBrew(++brew);\n        }\n    }\n    return (\n        <section className={classes}>\n            <button onClick={onClick}>\n                <div className=\"text\">\n                    <label>Brew</label>\n                    <h2 className={'count ' + number}>{brew}</h2>\n                </div>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Controls.scss';\n\ninterface ControlsProps {\n    onOld: any;\n    onNew: any;\n}\n\nexport const Controls = ({ onNew, onOld }: ControlsProps) => {\n    return (\n        <section className=\"controls\">\n            <button className=\"old\" onClick={onOld}>\n                <span> past </span>\n            </button>\n            <button className=\"new\" onClick={onNew}>\n                <span> new </span>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Color.scss'\n\ninterface ColorProps {\n    color: string\n    setColor: any\n    selected: string\n    setSelected: any\n}\n\nconst colorClass = (name: string, color: string) => cls([\n    'f-cc',\n    name,\n    name === color ? 'active' : ''\n]);\n\n\n\nexport const Color = ({ color, setColor: _setColor, selected, setSelected }: ColorProps) => {\n    const classes = cls([\n        'color',\n        //selected === 'color' ? 'selected' : '',\n    ]);\n    const setColor = (color: string) => {\n        setSelected('color');\n        _setColor(color);\n    }\n    return (\n        <section className={classes} >\n            <button className={colorClass('pu-erh', color)} onClick={() => setColor('pu-erh')} >\n                <span className=\"text\">\n                    Pu-erh\n                </span>\n            </button>\n            <button className={colorClass('black', color)} onClick={() => setColor('black')} >\n                <span className=\"text\">\n                    Black\n                </span>\n            </button>\n            <button className={colorClass('oolong', color)} onClick={() => setColor('oolong')}>\n                <span className=\"text\">\n                    <span className=\"olong\">\n                        {/* <span className=\"big-O\">\n                            O\n                        <span className=\"o\">o</span>\n                        </span>\n                        long */}\n                        <span className=\"oo\">Oo</span>long\n                    </span>\n                </span>\n            </button>\n            <button className={colorClass('green', color)} onClick={() => setColor('green')}>\n                <span className=\"text\">\n                    Green\n                </span>\n            </button>\n            <button className={colorClass('white', color)} onClick={() => setColor('white')}>\n                <span className=\"text\">\n                    White\n                </span>\n            </button>\n        </section>\n    );\n}\n\n","import React from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Temperature.scss';\n\ninterface temperatureProps {\n    temperature: number\n    setTemperature: any\n    isCelsius: boolean\n    setIsCelsius: any\n    selected: string\n    setSelected: any\n}\n\nexport const Temperature = ({ temperature, setTemperature, isCelsius, setIsCelsius, selected, setSelected }: temperatureProps) => {\n    const fClasses = cls([\n        'amount-label',\n        'fahrenheit',\n        isCelsius ? '' : 'active',\n    ]);\n    const cClasses = cls([\n        'amount-label',\n        'celsius',\n        isCelsius ? 'active' : '',\n    ]);\n    const classes = cls([\n        'temperature',\n        selected === 'temperature' ? 'selected' : '',\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('temperature');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--temperature\"\n                value={temperature}\n                onClick={onClick}\n                onChange={(e) => setTemperature(parseAmountInput(212, e))} />\n            <div className=\"value\">\n                <div className=\"circle\">\n                    <h2 className=\"amount\">{temperature}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={fClasses} onClick={() => setIsCelsius(false)}>°F</button>\n                <button className={cClasses} onClick={() => setIsCelsius(true)}>°C</button>\n            </div>\n        </section>\n    );\n}","import React from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Timer.scss'\n\n\nconst minSec = (time: number): number[] => {\n    const min = Math.floor(time / 60);\n    const sec = time - (min * 60);\n    return [min, sec];\n}\n\nconst valueNodes = (x: number) => {\n    x = x < 0 ? 0 : x;\n    const str = x < 10 ? `0${x}` : `${x}`;\n    return str\n        .split('')\n        .map((c: string, i: number) => (\n            <h2 key={`${i}-${c}`} className=\"value\">{c}</h2>\n        ));\n}\n\ninterface TimerProps {\n    time: number\n    setTime: any\n    selected: string\n    setSelected: any\n}\n\nexport const Timer = ({ time, setTime, selected, setSelected }: TimerProps) => {\n    const [min, sec] = minSec(time);\n    const setMinutes = (newMin: number) => {\n        const t = (newMin * 60) + sec;\n        setTime(t);\n    }\n    const setSeconds = (newSec: number) => {\n        const t = (min * 60) + newSec;\n        setTime(t);\n    }\n\n    const $min = valueNodes(min);\n    const $sec = valueNodes(sec);\n    const classes = cls([\n        'timer',\n        selected === 'minutes' ? 'selected-min' : '',\n        selected === 'seconds' ? 'selected-sec' : ''\n    ])\n\n    const onClickMinutes = (e: any) => {\n        scrollInput(e);\n        setSelected('minutes');\n    }\n\n    const onClickSeconds = (e: any) => {\n        scrollInput(e);\n        setSelected('seconds');\n    }\n    return (\n        <section className={classes} >\n            <section className=\"capsule min\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={min}\n                    onClick={onClickMinutes}\n                    onChange={(e) => setMinutes(parseAmountInput(9, e))} />\n                <label className=\"label\">\n                    min\n                </label>\n                <div className=\"values\">\n                    {$min}\n                </div>\n            </section>\n\n            <section className=\"capsule sec\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={sec}\n                    onClick={onClickSeconds}\n                    onChange={(e) => setSeconds(parseAmountInput(59, e))} />\n                <label className=\"label\">\n                    sec\n                </label>\n                <div className=\"values\">\n                    {$sec}\n                </div>\n            </section>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls } from '../utils';\nimport './Name.scss';\n\ninterface NameProps {\n    name: string,\n    setName: any,\n    selected: string\n    setSelected: any\n}\n\nexport const Name = ({ name, setName, selected, setSelected }: NameProps) => {\n    const [start, setStart] = useState(true);\n    const classes = cls([\n        'f-cc',\n        'name',\n        selected === 'name' ? 'selected' : '',\n        start ? 'start' : ''\n    ]);\n\n    const onClick = () => {\n        setSelected('name');\n    }\n\n    return (\n        <section className={classes}>\n            <input\n                type=\"text\"\n                className=\"input--text\"\n                placeholder=\"Tea\"\n                value={name}\n                onClick={onClick}\n                onChange={(e) => {\n                    let val = e.currentTarget.value;\n                    if (start) {\n                        setStart(false);\n                        val = val.replace('Tea', '');\n                    }\n                    setName(val);\n                }} />\n            <h1 className=\"name__name\">{name}</h1>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Overlay.scss';\n\ninterface OverlayProps {\n    isDone: boolean,\n    isOut: boolean,\n    setIsOut: any,\n    setTime: any,\n    lastTime: number\n}\n\nexport const Overlay = ({ isDone, isOut, setIsOut, setTime, lastTime }: OverlayProps) => {\n    const overlayClasses = cls([\n        'overlay',\n        isDone ? 'done' : '',\n        isOut ? 'out' : '',\n    ]);\n    return (\n        <div onClick={() => {\n            setIsOut(true);\n            setTime(lastTime);\n        }} className={overlayClasses}></div>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Weight.scss';\n\ninterface WeightProps {\n    weight: number;\n    setWeight: any;\n    isMass: boolean;\n    setIsMass: any;\n    selected: string;\n    setSelected: any;\n}\n\nexport const Weight = ({ weight, setWeight, isMass, setIsMass, selected, setSelected }: WeightProps) => {\n    const tspClasses = cls([\n        'amount-label',\n        'tsp',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n\n    const classes = cls([\n        'weight',\n        selected === 'weight' ? 'selected' : ''\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('weight');\n    }\n\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--weight\"\n                value={weight}\n                onClick={onClick}\n                onChange={(e) => setWeight(parseAmountInput(99, e))} />\n            <div className=\"diamond\">\n                <button className={tspClasses} onClick={() => setIsMass(false)}>tsp</button>\n                <h2 className=\"value\">{weight}</h2>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Water.scss';\n\ninterface WaterProps {\n    water: number\n    setWater: any\n    isMass: boolean\n    setIsMass: any\n    selected: string\n    setSelected: any\n}\n\nexport const Water = ({ water, setWater, isMass, setIsMass, selected, setSelected }: WaterProps) => {\n    const ozClasses = cls([\n        'amount-label',\n        'oz',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    const classes = cls([\n        'water',\n        selected === 'water' ? 'selected' : ''\n    ])\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('water');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--water glass\"\n                value={water}\n                onClick={onClick}\n                onChange={(e) => setWater(parseAmountInput(999, e))} />\n            <div className=\"value\">\n                <div className=\"glass\">\n                    <h2 className=\"amount\">{water}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={ozClasses} onClick={() => setIsMass(false)}>oz</button>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React from 'react';\n\n\nexport interface BrewSessionType {\n    brewNumber: number;\n    time: number;\n    temperature: number;\n    temperatureUnit: string;\n    water: number;\n    waterUnit: string;\n    mass: number;\n    massUnit: string;\n}\n\ninterface BrewSessionProps {\n    // sessionId: string;\n    brew: BrewSessionType;\n}\n\nexport const mockBrews = [\n    {\n        brewNumber: 1,\n        time: 15,\n        temperature: 195,\n        temperatureUnit: '°F',\n        water: 120,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n    {\n        brewNumber: 2,\n        time: 30,\n        temperature: 195,\n        temperatureUnit: '°F',\n        water: 110,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n];\n\n\n\nexport const BrewSession = ({ brew }: BrewSessionProps) => {\n    const { brewNumber, time, temperature, water } = brew;\n    return (\n        <div className=\"brew-session\">\n            <span className=\"session-brew-number\">{brewNumber}</span>\n            <span className=\"session-time\">{time}</span>\n            <span className=\"session-temperature\">{temperature}</span>\n            <span className=\"session-water\">{water}</span>\n        </div>\n    );\n};\n","import React from 'react';\nimport { BrewSession, BrewSessionType, mockBrews } from \"./BrewSession\";\n\nexport interface TeaSession {\n    id: string;\n    name: string;\n    color: string;\n    brews: BrewSessionType[];\n}\n\ninterface TeaSessionProps {\n    session: TeaSession;\n}\n\nexport const mockTeaSession = {\n    id: '001',\n    name: 'Hairy Crab',\n    color: 'oolong',\n    brews: mockBrews,\n}\n\nexport const TeaSession = ({ session }: TeaSessionProps) => {\n    const { id, name, color, brews } = session;\n    const $brews = brews.map(b => <BrewSession key={`${id}-${b.brewNumber}`} brew={b} />);\n    return (\n        <article className=\"tea-session\">\n            <div className=\"header\">\n                <span>\n                    <span className=\"name\">\n                        {name}\n                    </span>- {color}\n                </span>\n                <span className=\"id\">\n                    ({id})\n                </span>\n            </div>\n            <div className=\"labels\">\n                <span className=\"labels-brew-number\">brew</span>\n                <span>time</span>\n                <span>temperature</span>\n                <span>water</span>\n            </div>\n            {$brews}\n        </article>\n    );\n};\n","import React from 'react';\nimport './History.scss';\nimport { mockTeaSession, TeaSession } from './TeaSession';\n\ninterface HistoryProps {\n    sessions: TeaSession[];\n    onBack: any;\n}\n\nexport const mockHistory = {\n    sessions: [\n        {\n            ...mockTeaSession,\n            id: '002',\n            name: 'Mao Feng',\n            color: 'black'\n        },\n        mockTeaSession,\n    ]\n}\n\nexport const History = ({ sessions, onBack }: HistoryProps) => {\n    const $entries = sessions.map(e => <TeaSession key={e.id} session={e} />);\n    return (\n        <main className=\"history\">\n            <section className=\"controls\">\n                <button className=\"back\" onClick={onBack}>\n                    <span> now &rsaquo;</span>\n                </button>\n                {/* <button onClick={onNew}>\n                    <span> new </span>\n                </button> */}\n            </section>\n            <div className=\"gap\"></div>\n            <section className=\"sessions\">\n                {$entries}\n            </section>\n        </main>\n    );\n}","import React, { useEffect, useState } from 'react';\n\nimport { Brew } from './Brew';\nimport { Controls } from './Controls';\nimport { Color } from './Color';\nimport { Temperature } from './Temperature';\nimport { Timer } from './Timer';\nimport { Name } from './Name';\nimport { Overlay } from './Overlay';\nimport { Weight } from './Weight';\nimport { Water } from './Water';\n\nimport { History, mockHistory } from './History';\n\nimport './App.scss';\nimport { cls } from './utils';\nimport { TeaSession } from './History/TeaSession';\n\nconst isPWA = () => (window.matchMedia('(display-mode: standalone)').matches) || ((window.navigator as any).standalone) || document.referrer.includes('android-app://');\n\nfunction App() {\n  const [name, setName] = useState('Tea');\n  const [selected, setSelected] = useState('');\n  const [temperature, setTemperature] = useState(0);\n  const [isCelsius, setIsCelsius] = useState(false);\n  const [color, setColor] = useState('');\n  const [weight, setWeight] = useState(0);\n  const [isMassWeight, setIsMassWeight] = useState(true);\n  const [water, setWater] = useState(0);\n  const [isMassWater, setIsMassWater] = useState(true);\n  const [brew, _setBrew] = useState(0);\n  const [isTicking, setIsTicking] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [isOut, setIsOut] = useState(false);\n  const [time, setTime] = useState(15);\n  const [lastTime, setLastTime] = useState(time);\n  const [autoBrewTime, setAutoBrewTime] = useState(true);\n  const [page, setPage] = useState('main');\n  const [sessions, setSessions] = useState(mockHistory.sessions as any);\n\n  const onOld = () => {\n    setPage('history');\n  }\n\n  const onBack = () => {\n    setPage('main');\n  }\n\n  const reset = () => {\n    setName('Tea');\n    setColor('');\n    setSelected('');\n    setBrew(0);\n    setWater(0);\n    setTemperature(0);\n    setWeight(0);\n    setTime(0);\n    setIsDone(false);\n    setIsTicking(false);\n    setIsOut(false);\n  }\n\n  const setBrew = (count: number) => {\n    setIsTicking(!isTicking)\n    setIsDone(false);\n    setIsOut(false);\n    if (autoBrewTime) {\n      setLastTime(time + 15);\n    }\n    return _setBrew(count);\n  }\n\n  useEffect(() => {\n    if (!isTicking) {\n      return () => { };\n    }\n    const timer = setTimeout(() => {\n      setTime(time - 1);\n      if (time <= 0) {\n        setIsTicking(false);\n        setIsDone(true);\n        setTime(0);\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n  }, [isTicking, time]);\n\n  useEffect(() => {\n    if (isDone && isOut) {\n      setTimeout(() => {\n        setIsDone(false)\n        setSelected('overlay')\n      }, 200);\n    }\n  }, [isDone, isOut]);\n\n  const classes = cls([\n    'main',\n    isPWA() ? 'pwa' : '',\n    selected ? 'selecting' : '',\n  ]);\n\n  if (page === 'history') {\n    return (\n      <History sessions={sessions} onBack={onBack} />\n    );\n  }\n\n\n  return (\n    <main className={classes} >\n      <Controls onOld={onOld} onNew={reset} />\n      <Name selected={selected} setSelected={setSelected} name={name} setName={setName} />\n\n      <Temperature selected={selected} setSelected={setSelected} temperature={temperature} setTemperature={setTemperature} isCelsius={isCelsius} setIsCelsius={setIsCelsius} />\n      <Color selected={selected} setSelected={setSelected} color={color} setColor={setColor} />\n\n      <Weight selected={selected} setSelected={setSelected} weight={weight} setWeight={setWeight} isMass={isMassWeight} setIsMass={setIsMassWeight} />\n      <Water selected={selected} setSelected={setSelected} water={water} setWater={setWater} isMass={isMassWater} setIsMass={setIsMassWater} />\n\n      <Timer selected={selected} setSelected={setSelected} time={time} setTime={setTime} />\n      <Brew selected={selected} setSelected={setSelected} isTicking={isTicking} brew={brew} setBrew={setBrew} />\n\n      <Overlay isDone={isDone} isOut={isOut} setIsOut={setIsOut} setTime={setTime} lastTime={lastTime} />\n    </main>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}