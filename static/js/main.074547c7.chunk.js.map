{"version":3,"sources":["utils.ts","Brew/Brew.tsx","Controls/Controls.tsx","Color/Color.tsx","Temperature/Temperature.tsx","Timer/Timer.tsx","Name/Name.tsx","Overlay/Overlay.tsx","Weight/Weight.tsx","Water/Water.tsx","Draw.tsx","Sessions/BrewSession.tsx","Sessions/TeaSession.tsx","Sessions/index.ts","History/History.tsx","Label.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseAmountInput","max","e","val","parseInt","currentTarget","value","console","debug","x","last","toString","split","pop","wrap","cls","classes","join","scrollInput","window","scrollTo","top","getBoundingClientRect","behavior","Brew","brew","selected","onClick","number","className","Controls","onNew","onOld","colorClass","name","color","Color","_setColor","setColor","setSelected","Temperature","temperature","setTemperature","isCelsius","setIsCelsius","fClasses","cClasses","type","onChange","valueNodes","map","c","i","Timer","time","setTime","min","Math","floor","minSec","sec","$min","$sec","newMin","newSec","Name","setName","start","placeholder","replace","Overlay","isDone","isOut","setIsOut","lastTime","overlayClasses","Weight","weight","setWeight","isMass","setIsMass","tspClasses","gClasses","Water","water","setWater","ozClasses","CX","Draw","props","id","label","filename","setup","p5","canvasParentRef","canvas","createCanvas","parent","frameRate","strokeWeight","stroke","clear","createButton","position","CT","mousePressed","back","BUTTON_TOP","save","image","log","touchMoved","line","mouseX","mouseY","pmouseX","pmouseY","mouseDragged","datum","amount","unit","BrewSession","brewNumber","temperatureUnit","waterUnit","weightUnit","mockTeaSession","brews","mass","massUnit","TeaSession","session","_id","padStart","$brews","b","key","emptySessions","init","json","JSON","stringify","localStorage","setItem","getSessions","getItem","parse","set","sessions","sessionsJSON","storeSession","current","getSessionBrews","History","onBack","$entries","sort","a","confirm","removeItem","nouns","adjectives","vowels","isPWA","matchMedia","matches","navigator","standalone","document","referrer","includes","lastTea","getLastSession","lastBrew","length","nextBrewTime","t","App","useState","setId","_setBrew","isMassWeight","setIsMassWeight","isMassWater","setIsMassWater","setLastTime","page","setPage","autoBrewTime","isTicking","setIsTicking","setIsDone","setBrew","count","useEffect","timer","setTimeout","tick","store","bi","storeBrew","sessionNumber","noun","adjective","article","getLabel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.074547c7.chunk.js","sourcesContent":["\nexport const rand0 = (upper: number) => Math.floor(Math.random() * upper);\n\n\nexport const wrap = (max: number, x: number) => {\n    const chars = x.toString().split('');\n    const last = chars.pop() || '0';\n    console.debug(last);\n    return parseInt(last, 10);\n}\n\nexport const parseAmountInput = (max: number, e: any) => {\n    const val = parseInt(e.currentTarget.value, 10) || 0;\n    console.debug(val);\n    return val > max ? wrap(max, val) : val;\n}\n\nexport const cls = (classes: string[]): string => classes.join(' ');\n\nexport const scrollInput = (e: any) => {\n    window.scrollTo({\n        top: e.currentTarget.getBoundingClientRect().top,\n        behavior: 'smooth'\n    });\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Brew.scss';\n\ninterface BrewProps {\n    brew: number;\n    selected: string;\n    onClick: any;\n}\n\nexport const Brew = ({ brew, selected, onClick }: BrewProps) => {\n    const classes = cls([\n        'brew',\n        selected === 'brew' ? 'selected' : '',\n    ]);\n    const number = `number-${brew}`;\n    return (\n        <section className={classes}>\n            <button onClick={onClick}>\n                <div className=\"text\">\n                    <label>Brew</label>\n                    <h2 className={'count ' + number}>{brew}</h2>\n                </div>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Controls.scss';\n\ninterface ControlsProps {\n    onOld: any;\n    onNew: any;\n}\n\nexport const Controls = ({ onNew, onOld }: ControlsProps) => {\n    return (\n        <section className=\"controls\">\n            <button className=\"old\" onClick={onOld}>\n                <span> past </span>\n            </button>\n            <button className=\"new\" onClick={onNew}>\n                <span> new </span>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Color.scss'\n\ninterface ColorProps {\n    color: string\n    setColor: any\n    selected: string\n    setSelected: any\n}\n\nconst colorClass = (name: string, color: string) => cls([\n    'f-cc',\n    name,\n    name === color ? 'active' : ''\n]);\n\n\n\nexport const Color = ({ color, setColor: _setColor, selected, setSelected }: ColorProps) => {\n    const classes = cls([\n        'color',\n        //selected === 'color' ? 'selected' : '',\n    ]);\n    const setColor = (color: string) => {\n        setSelected('color');\n        _setColor(color);\n    }\n    return (\n        <section className={classes} >\n            <button className={colorClass('pu-erh', color)} onClick={() => setColor('pu-erh')} >\n                <span className=\"text\">\n                    Pu-erh\n                </span>\n            </button>\n            <button className={colorClass('black', color)} onClick={() => setColor('black')} >\n                <span className=\"text\">\n                    Black\n                </span>\n            </button>\n            <button className={colorClass('oolong', color)} onClick={() => setColor('oolong')}>\n                <span className=\"text\">\n                    <span className=\"olong\">\n                        {/* <span className=\"big-O\">\n                            O\n                        <span className=\"o\">o</span>\n                        </span>\n                        long */}\n                        <span className=\"oo\">Oo</span>long\n                    </span>\n                </span>\n            </button>\n            <button className={colorClass('green', color)} onClick={() => setColor('green')}>\n                <span className=\"text\">\n                    Green\n                </span>\n            </button>\n            <button className={colorClass('white', color)} onClick={() => setColor('white')}>\n                <span className=\"text\">\n                    White\n                </span>\n            </button>\n        </section>\n    );\n}\n\n","import React from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Temperature.scss';\n\ninterface temperatureProps {\n    temperature: number\n    setTemperature: any\n    isCelsius: boolean\n    setIsCelsius: any\n    selected: string\n    setSelected: any\n}\n\nexport const Temperature = ({ temperature, setTemperature, isCelsius, setIsCelsius, selected, setSelected }: temperatureProps) => {\n    const fClasses = cls([\n        'amount-label',\n        'fahrenheit',\n        isCelsius ? '' : 'active',\n    ]);\n    const cClasses = cls([\n        'amount-label',\n        'celsius',\n        isCelsius ? 'active' : '',\n    ]);\n    const classes = cls([\n        'temperature',\n        selected === 'temperature' ? 'selected' : '',\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('temperature');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--temperature\"\n                value={temperature}\n                onClick={onClick}\n                onChange={(e) => setTemperature(parseAmountInput(212, e))} />\n            <div className=\"value\">\n                <div className=\"circle\">\n                    <h2 className=\"amount\">{temperature}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={fClasses} onClick={() => setIsCelsius(false)}>°F</button>\n                <button className={cClasses} onClick={() => setIsCelsius(true)}>°C</button>\n            </div>\n        </section>\n    );\n}","import React from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Timer.scss'\n\n\nconst minSec = (time: number): number[] => {\n    const min = Math.floor(time / 60);\n    const sec = time - (min * 60);\n    return [min, sec];\n}\n\nconst valueNodes = (x: number) => {\n    x = x < 0 ? 0 : x;\n    const str = x < 10 ? `0${x}` : `${x}`;\n    return str\n        .split('')\n        .map((c: string, i: number) => (\n            <h2 key={`${i}-${c}`} className=\"value\">{c}</h2>\n        ));\n}\n\ninterface TimerProps {\n    time: number\n    setTime: any\n    selected: string\n    setSelected: any\n}\n\nexport const Timer = ({ time, setTime, selected, setSelected }: TimerProps) => {\n    const [min, sec] = minSec(time);\n    const setMinutes = (newMin: number) => {\n        const t = (newMin * 60) + sec;\n        setTime(t);\n    }\n    const setSeconds = (newSec: number) => {\n        const t = (min * 60) + newSec;\n        setTime(t);\n    }\n\n    const $min = valueNodes(min);\n    const $sec = valueNodes(sec);\n    const classes = cls([\n        'timer',\n        selected === 'minutes' ? 'selected-min' : '',\n        selected === 'seconds' ? 'selected-sec' : ''\n    ])\n\n    const onClickMinutes = (e: any) => {\n        scrollInput(e);\n        setSelected('minutes');\n    }\n\n    const onClickSeconds = (e: any) => {\n        scrollInput(e);\n        setSelected('seconds');\n    }\n    return (\n        <section className={classes} >\n            <section className=\"capsule min\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={min}\n                    onClick={onClickMinutes}\n                    onChange={(e) => setMinutes(parseAmountInput(9, e))} />\n                <label className=\"label\">\n                    min\n                </label>\n                <div className=\"values\">\n                    {$min}\n                </div>\n            </section>\n\n            <section className=\"capsule sec\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={sec}\n                    onClick={onClickSeconds}\n                    onChange={(e) => setSeconds(parseAmountInput(59, e))} />\n                <label className=\"label\">\n                    sec\n                </label>\n                <div className=\"values\">\n                    {$sec}\n                </div>\n            </section>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls } from '../utils';\nimport './Name.scss';\n\ninterface NameProps {\n    name: string,\n    setName: any,\n    selected: string\n    setSelected: any\n}\n\nexport const Name = ({ name, setName, selected, setSelected }: NameProps) => {\n    const start = name === 'Tea'; \n    const classes = cls([\n        'f-cc',\n        'name',\n        selected === 'name' ? 'selected' : '',\n        start ? 'start' : ''\n    ]);\n\n    const onClick = () => {\n        setSelected('name');\n    }\n\n    return (\n        <section className={classes}>\n            <input\n                type=\"text\"\n                className=\"input--text\"\n                placeholder=\"Tea\"\n                value={name}\n                onClick={onClick}\n                onChange={(e) => {\n                    let val = e.currentTarget.value;\n                    if (start) {\n                        val = val.replace('Tea', '');\n                    }\n                    setName(val);\n                }} />\n            <h1 className=\"name__name\">{name}</h1>\n        </section>\n    );\n}","import React from 'react';\nimport { cls } from '../utils';\nimport './Overlay.scss';\n\ninterface OverlayProps {\n    isDone: boolean,\n    isOut: boolean,\n    setIsOut: any,\n    setTime: any,\n    lastTime: number\n}\n\nexport const Overlay = ({ isDone, isOut, setIsOut, setTime, lastTime }: OverlayProps) => {\n    const overlayClasses = cls([\n        'overlay',\n        isDone ? 'done' : '',\n        isOut ? 'out' : '',\n    ]);\n    return (\n        <div onClick={() => {\n            setIsOut(true);\n            setTime(lastTime);\n        }} className={overlayClasses}></div>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Weight.scss';\n\ninterface WeightProps {\n    weight: number;\n    setWeight: any;\n    isMass: boolean;\n    setIsMass: any;\n    selected: string;\n    setSelected: any;\n}\n\nexport const Weight = ({ weight, setWeight, isMass, setIsMass, selected, setSelected }: WeightProps) => {\n    const tspClasses = cls([\n        'amount-label',\n        'tsp',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n\n    const classes = cls([\n        'weight',\n        selected === 'weight' ? 'selected' : ''\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('weight');\n    }\n\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--weight\"\n                value={weight}\n                onClick={onClick}\n                onChange={(e) => setWeight(parseAmountInput(99, e))} />\n            <div className=\"diamond\">\n                <button className={tspClasses} onClick={() => setIsMass(false)}>tsp</button>\n                <h2 className=\"value\">{weight}</h2>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Water.scss';\n\ninterface WaterProps {\n    water: number\n    setWater: any\n    isMass: boolean\n    setIsMass: any\n    selected: string\n    setSelected: any\n}\n\nexport const Water = ({ water, setWater, isMass, setIsMass, selected, setSelected }: WaterProps) => {\n    const ozClasses = cls([\n        'amount-label',\n        'oz',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    const classes = cls([\n        'water',\n        selected === 'water' ? 'selected' : ''\n    ])\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('water');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--water glass\"\n                value={water}\n                onClick={onClick}\n                onChange={(e) => setWater(parseAmountInput(999, e))} />\n            <div className=\"value\">\n                <div className=\"glass\">\n                    <h2 className=\"amount\">{water}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={ozClasses} onClick={() => setIsMass(false)}>oz</button>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\n\ninterface DrawProps {\n    start: any;\n    back: any;\n    id: string;\n    label: string;\n    isDone: boolean;\n}\n\nconst WIDTH = 375;\nconst CX = 320;\nconst CY = 320;\nconst C_MARGIN_TOP = 150;\nconst CT = CY + C_MARGIN_TOP;\nconst BUTTON_WIDTH = 10;\nconst BUTTON_TOP_MARGIN = 30;\nconst BUTTON_TOP = CT + BUTTON_TOP_MARGIN;\nconst BUTTON_LEFT = (WIDTH - CX) / 2;\n\nlet p6: any;\n\nexport const Draw: React.FC<DrawProps> = (props: DrawProps) => {\n    const { id, label } = props;\n    const filename = `${label}.png`;\n\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\n        p6 = p5;\n        const canvas = p5.createCanvas(CX, CY).parent(canvasParentRef);\n        p5.frameRate(120);\n        p5.strokeWeight(5);\n        p5.stroke('#26906D');\n\n        p5.clear();\n\n        const clear = p5.createButton('clear');\n        clear.position(CX - BUTTON_WIDTH, BUTTON_TOP);\n        clear.mousePressed(() => p5.clear());\n\n        const back = p5.createButton('back');\n        back.position(CX - BUTTON_WIDTH, BUTTON_TOP + 90);\n        back.mousePressed(() => props.back());\n\n        const save = p5.createButton('save');\n        save.position(BUTTON_LEFT, BUTTON_TOP);\n        save.mousePressed(() => {\n            const image = p5.save(canvas, filename);\n            console.log(image);\n            props.back();\n        });\n\n        props.start()\n    };\n\n    const mouseDragged = (p5: p5Types) => {\n        p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\n    }\n\n    const touchMoved = (p5: p5Types) => {\n        p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\n    }\n\n\n    return (\n        <>\n            <Sketch setup={setup} touchMoved={touchMoved} mouseDragged={mouseDragged} />\n            <p className=\"subject\">Draw {label}</p>\n        </>\n    );\n}","import React from 'react';\n\nexport interface BrewSessionType {\n    brewNumber: number;\n    time: number;\n    temperature: number;\n    temperatureUnit: string;\n    water: number;\n    waterUnit: string;\n    weight: number;\n    weightUnit: string;\n}\n\ninterface BrewSessionProps {\n    // sessionId: string;\n    brew: BrewSessionType;\n}\n\nexport const mockBrews = [\n    {\n        brewNumber: 1,\n        time: 15,\n        temperature: 195,\n        temperatureUnit: '°F',\n        water: 120,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n    {\n        brewNumber: 2,\n        time: 30,\n        temperature: 195,\n        temperatureUnit: 'F',\n        water: 110,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n];\n\n\nconst datum = (amount: number, unit: string) => {\n    if (!amount) {\n        return (<span>-</span>);\n    }\n    return (\n        <>\n            {amount}\n            <span className=\"unit\">{unit}</span>\n        </>\n    );\n}\n\nexport const BrewSession = ({ brew }: BrewSessionProps) => {\n    const { brewNumber, time, temperature, water, weight, temperatureUnit, waterUnit, weightUnit } = brew;\n    return (\n        <div className=\"brew-session\">\n            <span className=\"session-brew-number\">{brewNumber}</span>\n            <span className=\"session-time\">\n                {datum(time, 's')}\n            </span>\n            <span className=\"session-weight\">\n                {datum(weight, weightUnit)}\n            </span>\n            <span className=\"session-temperature\">\n                {datum(temperature, `°${temperatureUnit}`)}\n            </span>\n            <span className=\"session-water\">\n                {datum(water, waterUnit)}\n            </span>\n        </div>\n    );\n};\n","import React from 'react';\nimport { BrewSession, BrewSessionType, mockBrews } from \"./BrewSession\";\nimport './Sessions.scss';\n\nexport interface TeaSession {\n    id: number;\n    name: string;\n    color: string;\n    brews: BrewSessionType[];\n}\n\ninterface TeaSessionProps {\n    session: TeaSession;\n}\n\nexport const mockTeaSession = {\n    id: 1,\n    name: 'Hairy Crab',\n    color: 'oolong',\n    brews: mockBrews,\n}\n\n\nexport const TeaSession = ({ session }: TeaSessionProps) => {\n    const { id: _id, name, color, brews } = session;\n    const id = _id.toString().padStart(3, '0');\n    const $brews = brews.map(b => <BrewSession key={`${id}-${b.brewNumber}`} brew={b} />);\n    return (\n        <article className=\"tea-session\">\n            <div className=\"header\">\n                <span>\n                    <span className=\"name\">\n                        {name === 'Tea' ? <span className=\"mystery\">???</span> : name}\n                    </span>{color ? '-' : null} {color}\n                </span>\n                <span className=\"id\">\n                    <span className=\"light\">(</span>\n                    {id}\n                    <span className=\"light\">)</span>\n                </span>\n            </div>\n            <div className=\"labels\">\n                <span className=\"labels-brew-number\">brew</span>\n                <span>time</span>\n                <span>weight</span>\n                <span>temperature</span>\n                <span>water</span>\n            </div>\n            {$brews}\n        </article>\n    );\n};\n","import { TeaSession } from \"./TeaSession\";\nimport { BrewSessionType } from \"./BrewSession\";\n\nconst key = 'sessions';\n\nconst emptySessions = [\n    {\n        id: 1,\n        name: '',\n        color: '',\n        brews: [],\n    }\n\n]\n\nfunction init() {\n    const json = JSON.stringify(emptySessions);\n    localStorage.setItem(key, json)\n    return json;\n}\n\nexport function getSessions(): TeaSession[] {\n    const json = localStorage.getItem(key) || init();\n    const sessions = JSON.parse(json);\n    return sessions;\n}\n\nexport function getLastSession(): TeaSession {\n    const json = localStorage.getItem(key) || init();\n    const sessions = JSON.parse(json);\n    return sessions.pop();\n}\n\nexport function newSession(tea: TeaSessionCurrent): TeaSession[] {\n    const previous = getSessions();\n    const teaSession = {\n        ...tea,\n        brews: [],\n    }\n    const sessions = [teaSession, ...previous];\n    return set(sessions);\n}\n\nfunction set(sessions: TeaSession[]): TeaSession[] {\n    const sessionsJSON = JSON.stringify(sessions);\n    localStorage.setItem(key, sessionsJSON);\n    return sessions;\n}\n\nexport function storeSession(current: TeaSessionCurrent): TeaSession {\n    const sessions = getSessions();\n    const brews = getSessionBrews(current);\n    const session = {\n        ...current,\n        brews\n    };\n    sessions[current.id - 1] = session;\n    const sessionsJSON = JSON.stringify(sessions);\n    localStorage.setItem(key, sessionsJSON);\n    return session;\n}\n\nexport function storeBrew(current: TeaSessionCurrent, brew: BrewSessionType): TeaSession {\n    const sessions = getSessions();\n    const i = current.id - 1;\n    const session = sessions[i];\n\n    const bi = brew.brewNumber - 1\n    session.brews[bi] = brew;\n    sessions[i] = session;\n    set(sessions);\n\n    return session;\n}\n\nfunction getSessionBrews(current: TeaSessionCurrent) {\n    const sessions = getSessions();\n    const i = current.id - 1;\n    const brews = sessions[i]?.brews || [];\n    return brews;\n}\n\nexport function clearSessions() {\n    localStorage.removeItem(key);\n}\n\n\ntype TeaSessionCurrent = Pick<TeaSession, 'id' | 'name' | 'color'>;","import React from 'react';\nimport './History.scss';\nimport { mockTeaSession, TeaSession } from '../Sessions/TeaSession';\nimport { clearSessions, getSessions } from '../Sessions';\n\ninterface HistoryProps {\n    // sessions: TeaSession[];\n    onBack: any;\n}\n\nexport const mockHistory = {\n    sessions: [\n        {\n            ...mockTeaSession,\n            id: 2,\n            name: 'Mao Feng',\n            color: 'black'\n        },\n        mockTeaSession,\n    ]\n}\n\n\nexport const History = ({ onBack }: HistoryProps) => {\n    const sessions = getSessions();\n    const $entries = sessions.sort((a, b) => b.id - a.id).map(e => <TeaSession key={e.id} session={e} />);\n    const confirmClear = () => {\n        const clear = window.confirm('really?');\n        if (clear) {\n            clearSessions();\n            onBack()\n        }\n    }\n    return (\n        <article className=\"history\">\n            <section className=\"controls\">\n                <button className=\"back\" onClick={onBack}>\n                    <span> now </span>\n                </button>\n                <button onClick={confirmClear}>\n                    <span> clear </span>\n                </button>\n            </section>\n            <div className=\"gap\"></div>\n            <section className=\"sessions\">\n                {$entries}\n            </section>\n        </article>\n    );\n}","const nouns = [\n    'apple',\n    'frog',\n    'tree',\n    'cylinder',\n    'cactus',\n    'rock',\n    'pilot',\n    'pencil',\n    'river',\n    'breakfast',\n    'camera',\n    'candle',\n    'machine',\n    'dream',\n]\n\nconst adjectives = [\n    'calm',\n    'happy',\n    'long',\n    'beautiful',\n    'lazy',\n    'polite',\n    'repressed',\n    'unkempt',\n    'clean',\n    'evil',\n    'frail',\n    'modern',\n    'wild'\n]\n\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\nexport const getLabel = (sessionNumber: number, brewNumber: number) => {\n    const noun = nouns[brewNumber % nouns.length];\n    const adjective = adjectives[(sessionNumber + brewNumber) % adjectives.length];\n    const article = vowels.includes(adjective[0]) ? 'an' : 'a';\n    return `${article} ${adjective} ${noun}`;\n}","import React, { useEffect, useState } from 'react';\n\nimport { Brew } from './Brew';\nimport { Controls } from './Controls';\nimport { Color } from './Color';\nimport { Temperature } from './Temperature';\nimport { Timer } from './Timer';\nimport { Name } from './Name';\nimport { Overlay } from './Overlay';\nimport { Weight } from './Weight';\nimport { Water } from './Water';\nimport { Draw } from './Draw';\n\nimport { History } from './History';\nimport { getLastSession, storeSession, storeBrew } from './Sessions';\nimport { getLabel } from './Label';\n\nimport './App.scss';\nimport { cls } from './utils';\n\nconst isPWA = () => (window.matchMedia('(display-mode: standalone)').matches) || ((window.navigator as any).standalone) || document.referrer.includes('android-app://');\nconst lastTea = getLastSession();\nconst lastBrew = lastTea.brews[lastTea.brews.length - 1] || {};\nconst nextBrewTime = (t: number) => t + 15;\n\nfunction App() {\n  const [id, setId] = useState(lastTea.id);\n  const [name, setName] = useState(lastTea.name || 'Tea');\n  const [color, setColor] = useState(lastTea.color || '');\n  const [brewNumber, _setBrew] = useState(lastBrew.brewNumber || 0);\n  const [temperature, setTemperature] = useState(lastBrew.temperature || 0);\n  const [isCelsius, setIsCelsius] = useState(lastBrew.temperatureUnit === 'C');\n  const [weight, setWeight] = useState(lastBrew.weight || 0);\n  const [isMassWeight, setIsMassWeight] = useState(lastBrew.weightUnit === 'g');\n  const [water, setWater] = useState(lastBrew.water || 0);\n  const [isMassWater, setIsMassWater] = useState(lastBrew.waterUnit === 'g');\n  const [time, setTime] = useState(lastBrew.time || nextBrewTime(0));\n  const [lastTime, setLastTime] = useState(time);\n\n  const [page, setPage] = useState('main');\n  const [selected, setSelected] = useState('');\n  const [autoBrewTime, setAutoBrewTime] = useState(true);\n\n  const [isTicking, setIsTicking] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [isOut, setIsOut] = useState(false);\n\n  const brew = {\n    brewNumber,\n    time: lastTime,\n    temperature,\n    weight,\n    water,\n    temperatureUnit: isCelsius ? 'C' : 'F',\n    waterUnit: isMassWater ? 'g' : 'oz',\n    weightUnit: isMassWeight ? 'g' : 'tsp',\n  }\n\n  const session = {\n    id,\n    name,\n    color,\n  }\n\n\n  const onOld = () => {\n    if (id === 1 && brewNumber === 0) {\n      return;\n    }\n    setPage('history');\n  }\n\n  const onBack = () => {\n    setPage('main');\n  }\n\n  const reset = () => {\n    setName('Tea');\n    setColor('');\n    setSelected('');\n    setBrew(0);\n    setWater(0);\n    setTemperature(0);\n    setWeight(0);\n    setTime(autoBrewTime ? nextBrewTime(0) : 0);\n    setIsDone(false);\n    setIsTicking(false);\n    setIsOut(false);\n    setId(id + 1);\n  }\n\n  const setBrew = (count: number) => {\n    setIsTicking(!isTicking)\n    setIsDone(false);\n    setIsOut(false);\n    if (autoBrewTime) {\n      setLastTime(nextBrewTime(time));\n    }\n    return _setBrew(count);\n  }\n\n  const startBrewing = () => {\n    if (!isTicking) {\n      setSelected('brew');\n      const nextNumber = brewNumber + 1;\n      setBrew(nextNumber);\n    }\n    setPage('draw');\n  }\n\n\n  const tick = () => {\n    if (!isTicking) {\n      return () => { };\n    }\n    const timer = setTimeout(() => {\n      setTime(time - 1);\n      if (time <= 0) {\n        setIsTicking(false);\n        setIsDone(true);\n        setTime(0);\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n\n  }\n  useEffect(() => {\n    tick();\n  }, [isTicking, time]);\n\n  const removeOverlay = () => {\n    if (isDone && isOut) {\n      setTimeout(() => {\n        setIsDone(false)\n        setSelected('overlay')\n      }, 200);\n    }\n  }\n  useEffect(() => {\n    removeOverlay()\n  }, [isDone, isOut]);\n\n\n  const store = () => {\n    if (brewNumber === 0) {\n      return;\n    }\n    storeSession(session);\n    storeBrew(session, brew);\n  }\n  useEffect(() => {\n    store();\n  }, [brewNumber]);\n\n\n  const classes = cls([\n    'main',\n    isPWA() ? 'pwa' : '',\n    selected ? 'selecting' : '',\n  ]);\n\n  if (page === 'history') {\n\n    return (\n      <main>\n        <History onBack={onBack} />\n        <Overlay isDone={isDone} isOut={isOut} setIsOut={setIsOut} setTime={setTime} lastTime={lastTime} />\n      </main>\n    );\n  }\n\n  if (page === 'draw') {\n    const label = getLabel(id, brewNumber);\n    return (\n      <main className=\"draw\">\n        <article>\n          <Draw\n            start={() => { }}\n            back={() => setPage('main')}\n            isDone={isDone}\n            label={label}\n            id={`${id}-${brewNumber}`}\n          />\n          <Timer selected={selected} setSelected={setSelected} time={time} setTime={setTime} />\n          <Overlay isDone={isDone} isOut={isOut} setIsOut={setIsOut} setTime={setTime} lastTime={lastTime} />\n        </article>\n      </main>\n    );\n  };\n\n  return (\n    <main >\n      <article className={classes}>\n        <p className=\"pwa\">\n          {isPWA() ? 'pwa' : 'web'}\n        </p>\n        <Controls onOld={onOld} onNew={reset} />\n        <Name selected={selected} setSelected={setSelected} name={name} setName={setName} />\n\n        <Temperature selected={selected} setSelected={setSelected} temperature={temperature} setTemperature={setTemperature} isCelsius={isCelsius} setIsCelsius={setIsCelsius} />\n        <Color selected={selected} setSelected={setSelected} color={color} setColor={setColor} />\n\n        <Weight selected={selected} setSelected={setSelected} weight={weight} setWeight={setWeight} isMass={isMassWeight} setIsMass={setIsMassWeight} />\n        <Water selected={selected} setSelected={setSelected} water={water} setWater={setWater} isMass={isMassWater} setIsMass={setIsMassWater} />\n\n        <Timer selected={selected} setSelected={setSelected} time={time} setTime={setTime} />\n        <Brew selected={selected} brew={brewNumber} onClick={startBrewing} />\n        <div className=\"sip\">sip</div>\n      </article>\n\n      <Overlay isDone={isDone} isOut={isOut} setIsOut={setIsOut} setTime={setTime} lastTime={lastTime} />\n    </main>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}