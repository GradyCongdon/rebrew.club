{"version":3,"sources":["Brew/Brew.tsx","Controls/Controls.tsx","Color/Color.tsx","utils.ts","Timer/Timer.tsx","Name/Name.tsx","Weight/Weight.tsx","Water/Water.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Brew","brew","setBrew","number","className","onClick","Controls","Color","color","setColor","parseAmountInput","max","e","val","parseInt","currentTarget","value","console","debug","x","last","toString","split","pop","wrap","cls","classes","join","values","map","c","i","Timer","minutes","setMinutes","seconds","setSeconds","$min","$sec","type","onChange","Name","name","setName","Weight","weight","setWeight","isMass","setIsMass","tspClasses","gClasses","Water","water","setWater","ozClasses","App","useState","isMassWeight","setIsMassWeight","isMassWater","setIsMassWater","_setBrew","isTicking","setIsTicking","isDone","setIsDone","lastTime","setLastTime","useEffect","timer","setTimeout","clearTimeout","overlayClasses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8833275e.chunk.js","sourcesContent":["import React from 'react';\nimport './Brew.scss';\n\ninterface BrewProps {\n    brew: number;\n    setBrew: any;\n}\n\nexport const Brew = ({ brew, setBrew }: BrewProps) => {\n    const number = `number-${brew}`;\n    return (\n        <section className=\"brew\">\n            <button onClick={() => setBrew(++brew)}>\n                <div className=\"text\">\n                    <label>Brew</label>\n                    <h2 className={'count ' + number}>{brew}</h2>\n                </div>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Controls.scss';\n\nexport const Controls = () => {\n    return (\n        <section className=\"controls\">\n            <button>\n                <span> old </span>\n            </button>\n            <button>\n                <span> new </span>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Color.scss'\n\ninterface ColorProps {\n    color: string,\n    setColor: any,\n}\n\n\nexport const Color = ({ color, setColor }: ColorProps) => {\n    return (\n        <section className=\"color\">\n            <button className=\"f-cc black\">\n                <span className=\"text\">\n                    Black\n          </span>\n            </button>\n            <button className=\"f-cc oolong\">\n                <span className=\"text\">\n                    <span className=\"olong\">\n                        <span className=\"big-O\">\n                            O\n                        <span className=\"o\">o</span>\n                        </span>\n                        long\n                    </span>\n                </span>\n            </button>\n            <button className=\"f-cc green\">\n                <span className=\"text\">\n                    Green\n          </span>\n            </button>\n            <button className=\"f-cc white\">\n                <span className=\"text\">\n                    White\n          </span>\n            </button>\n        </section>\n    );\n}\n\n","\nexport const rand0 = (upper: number) => Math.floor(Math.random() * upper);\n\n\nexport const wrap = (max: number, x: number) => {\n    const chars = x.toString().split('');\n    const last = chars.pop() || '0';\n    console.debug(last);\n    return parseInt(last, 10);\n}\n\nexport const parseAmountInput = (max: number, e: any) => {\n    const val = parseInt(e.currentTarget.value, 10) || 0;\n    console.debug(val);\n    return val > max ? wrap(max, val) : val;\n}\n\nexport const cls = (classes: string[]): string => classes.join(' ');","import React, { useState } from 'react';\nimport { parseAmountInput } from '../utils';\nimport './Timer.scss'\n\n\nconst values = (x: number) => {\n    x = x < 0 ? 0 : x;\n    const str = x < 10 ? `0${x}` : `${x}`;\n    return str\n        .split('')\n        .map((c: string, i: number) => (\n            <h2 key={`${i}-${c}`} className=\"value\">{c}</h2>\n        ));\n}\n\ninterface TimerProps {\n    minutes: number\n    seconds: number\n    setMinutes: any\n    setSeconds: any\n}\n\nexport const Timer = ({ minutes, setMinutes, seconds, setSeconds }: TimerProps) => {\n    const $min = values(minutes);\n    const $sec = values(seconds);\n    return (\n        <section className=\"timer\">\n            <section className=\"capsule min\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={minutes}\n                    onChange={(e) => setMinutes(parseAmountInput(9, e))} />\n                <label className=\"label\">\n                    min\n                </label>\n                <div className=\"values\">\n                    {$min}\n                </div>\n            </section>\n\n            <section className=\"capsule sec\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={seconds}\n                    onChange={(e) => setSeconds(parseAmountInput(59, e))} />\n                <label className=\"label\">\n                    sec\n                </label>\n                <div className=\"values\">\n                    {$sec}\n                </div>\n            </section>\n        </section>\n    );\n}","import React from 'react';\nimport './Name.scss';\n\ninterface NameProps {\n    name: string,\n    setName: any,\n}\n\nexport const Name = ({ name, setName }: NameProps) => {\n    return (\n        <section className=\"f-cc name\">\n            <input type=\"text\" className=\"input--text\" onChange={(e) => setName(e.currentTarget.value)} />\n            <h1 className=\"name__name\">{name}</h1>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Weight.scss';\n\ninterface WeightProps {\n    weight: number;\n    setWeight: any;\n    isMass: boolean;\n    setIsMass: any;\n}\n\nexport const Weight = ({ weight, setWeight, isMass, setIsMass }: WeightProps) => {\n    const tspClasses = cls([\n        'amount-label',\n        'tsp',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    return (\n        <section className=\"weight\">\n            <input\n                type=\"tel\"\n                className=\"input--weight\"\n                value={weight}\n                onChange={(e) => setWeight(parseAmountInput(99, e))} />\n            <div className=\"diamond\">\n                <button className={tspClasses} onClick={() => setIsMass(false)}>tsp</button>\n                <h2 className=\"value\">{weight}</h2>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useState } from 'react';\nimport { cls, parseAmountInput } from '../utils';\nimport './Water.scss';\n\ninterface WaterProps {\n    water: number,\n    setWater: any,\n    isMass: boolean;\n    setIsMass: any\n}\n\nexport const Water = ({ water, setWater, isMass, setIsMass }: WaterProps) => {\n    const ozClasses = cls([\n        'amount-label',\n        'oz',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    return (\n        <section className=\"water\">\n            <input\n                type=\"tel\"\n                className=\"input--water\"\n                value={water}\n                onChange={(e) => setWater(parseAmountInput(999, e))} />\n            <div className=\"value\">\n                <div className=\"glass\">\n                    <h2 className=\"amount\">{water}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={ozClasses} onClick={() => setIsMass(false)}>oz</button>\n                <button className={gClasses} onClick={() => setIsMass(true)}>g</button>\n            </div>\n        </section>\n    );\n}","import React, { useEffect, useState } from 'react';\n\nimport { Brew } from './Brew';\nimport { Controls } from './Controls';\nimport { Color } from './Color';\nimport { Timer } from './Timer';\nimport { Name } from './Name';\nimport { Weight } from './Weight';\nimport { Water } from './Water';\n\nimport './App.scss';\nimport { cls } from './utils';\n\nfunction App() {\n  const [name, setName] = useState('Tai Ping Hou Kui');\n  const [color, setColor] = useState('');\n  const [weight, setWeight] = useState(0);\n  const [isMassWeight, setIsMassWeight] = useState(true);\n  const [water, setWater] = useState(0);\n  const [isMassWater, setIsMassWater] = useState(true);\n  const [brew, _setBrew] = useState(0);\n  const [isTicking, setIsTicking] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [lastTime, setLastTime] = useState(seconds);\n\n  const setBrew = (x: number) => {\n    setIsTicking(!isTicking)\n    setIsDone(false);\n    setLastTime(seconds);\n    return _setBrew(x);\n  }\n\n  useEffect(() => {\n    if (!isTicking) {\n      return () => { };\n    }\n    const timer = setTimeout(() => {\n      setSeconds(seconds - 1);\n      if (seconds <= 0) {\n        setIsTicking(false);\n        setIsDone(true);\n        setMinutes(0);\n        setSeconds(0);\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n  });\n\n  const overlayClasses = cls([\n    'overlay',\n    isDone ? 'done' : '',\n  ]);\n\n  return (\n    <main >\n      <div onClick={() => {\n        setIsDone(false);\n        setSeconds(lastTime);\n      }} className={overlayClasses}></div>\n        <Controls />\n      <Name name={name} setName={setName} />\n      <Color color={color} setColor={setColor} />\n      <Weight weight={weight} setWeight={setWeight} isMass={isMassWeight} setIsMass={setIsMassWeight} />\n      <Water water={water} setWater={setWater} isMass={isMassWater} setIsMass={setIsMassWater} />\n      <Brew brew={brew} setBrew={setBrew} />\n      <Timer minutes={minutes} setMinutes={setMinutes} seconds={seconds} setSeconds={setSeconds} />\n      </main>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}