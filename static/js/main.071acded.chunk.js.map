{"version":3,"sources":["utils.ts","Brew/Brew.tsx","Controls/Controls.tsx","Color/Color.tsx","Temperature/Temperature.tsx","Timer/Timer.tsx","Name/Name.tsx","Overlay/Overlay.tsx","Weight/Weight.tsx","Water/Water.tsx","Draw.tsx","Sessions/BrewSession.tsx","Sessions/TeaSession.tsx","Sessions/index.ts","History/History.tsx","Label.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseAmountInput","max","e","val","parseInt","currentTarget","value","console","debug","x","last","toString","split","pop","wrap","cls","classes","join","scrollInput","window","scrollTo","top","getBoundingClientRect","behavior","Brew","onClick","useRecoilState","brewNumberState","brew","selectedState","selected","number","className","Controls","onNew","onOld","colorClass","name","color","Color","colorState","_setColor","setSelected","setColor","Temperature","temperatureState","temperature","setTemperature","temperatureUnitState","temperatureUnit","setTemperatureUnit","fClasses","cClasses","type","onChange","valueNodes","map","c","i","Timer","timeState","time","setTime","min","Math","floor","minSec","sec","$min","$sec","newMin","newSec","Name","setName","start","placeholder","replace","Overlay","isDone","isOut","clearOverlay","overlayClasses","Weight","weightState","weight","setWeight","weightUnitState","weightUnit","setWeightUnit","tspClasses","gClasses","isMassState","selector","key","get","waterUnitState","Water","waterState","water","setWater","setWaterUnit","isMass","useRecoilValue","ozClasses","Draw","props","id","label","filename","setup","p5","canvasParentRef","canvas","createCanvas","parent","frameRate","strokeWeight","stroke","clear","createButton","position","CX","CT","mousePressed","back","BUTTON_TOP","save","image","log","touchMoved","line","mouseX","mouseY","pmouseX","pmouseY","mouseDragged","datum","amount","unit","BrewSession","brewNumber","waterUnit","mockTeaSession","brews","mass","massUnit","TeaSession","session","_id","padStart","$brews","b","emptySessions","init","json","JSON","stringify","localStorage","setItem","getSessions","getItem","parse","set","sessions","sessionsJSON","storeSession","current","getSessionBrews","History","onBack","$entries","sort","a","confirm","removeItem","nouns","adjectives","vowels","isPWA","matchMedia","matches","navigator","standalone","document","referrer","includes","lastTea","getLastSession","lastBrew","length","nextBrewTime","t","idState","atom","default","lastTimeState","nameState","pageState","isTickingState","App","setId","_setBrew","lastTime","setLastTime","page","setPage","isTicking","setIsTicking","useState","autoBrewTime","setIsDone","setIsOut","setBrew","count","useEffect","timer","setTimeout","tick","store","bi","storeBrew","sessionNumber","noun","adjective","article","getLabel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.071acded.chunk.js","sourcesContent":["\nexport const rand0 = (upper: number) => Math.floor(Math.random() * upper);\n\n\nexport const wrap = (max: number, x: number) => {\n    const chars = x.toString().split('');\n    const last = chars.pop() || '0';\n    console.debug(last);\n    return parseInt(last, 10);\n}\n\nexport const parseAmountInput = (max: number, e: any) => {\n    const val = parseInt(e.currentTarget.value, 10) || 0;\n    console.debug(val);\n    return val > max ? wrap(max, val) : val;\n}\n\nexport const cls = (classes: string[]): string => classes.join(' ');\n\nexport const scrollInput = (e: any) => {\n    window.scrollTo({\n        top: e.currentTarget.getBoundingClientRect().top,\n        behavior: 'smooth'\n    });\n}","import { useRecoilState } from 'recoil';\nimport { brewNumberState, selectedState } from '../App';\nimport { cls } from '../utils';\nimport './Brew.scss';\n\ninterface BrewProps {\n    // brew: number;\n    // selected: string;\n    onClick: any;\n}\n\nexport const Brew = ({ onClick }: BrewProps) => {\n    const [brew] = useRecoilState(brewNumberState);\n    const [selected] = useRecoilState(selectedState);\n    const classes = cls([\n        'brew',\n        selected === 'brew' ? 'selected' : '',\n    ]);\n    const number = `number-${brew}`;\n    return (\n        <section className={classes}>\n            <button onClick={onClick}>\n                <div className=\"text\">\n                    <label>Brew</label>\n                    <h2 className={'count ' + number}>{brew}</h2>\n                </div>\n            </button>\n        </section>\n    );\n}","import React from 'react';\nimport './Controls.scss';\n\ninterface ControlsProps {\n    onOld: any;\n    onNew: any;\n}\n\nexport const Controls = ({ onNew, onOld }: ControlsProps) => {\n    return (\n        <section className=\"controls\">\n            <button className=\"old\" onClick={onOld}>\n                <span> past </span>\n            </button>\n            <button className=\"new\" onClick={onNew}>\n                <span> new </span>\n            </button>\n        </section>\n    );\n}","import { useRecoilState } from 'recoil';\nimport { colorState, selectedState } from '../App';\nimport { cls } from '../utils';\nimport './Color.scss'\n\ninterface ColorProps {\n    color: string\n    setColor: any\n    selected: string\n    setSelected: any\n}\n\nconst colorClass = (name: string, color: string) => cls([\n    'f-cc',\n    name,\n    name === color ? 'active' : ''\n]);\n\n\n\nexport const Color = () => {\n    const [color, _setColor] = useRecoilState(colorState);\n    const [_, setSelected] = useRecoilState(selectedState);\n    const classes = cls([\n        'color',\n        //selected === 'color' ? 'selected' : '',\n    ]);\n    const setColor = (color: string) => {\n        setSelected('color');\n        _setColor(color);\n    }\n    return (\n        <section className={classes} >\n            <button className={colorClass('pu-erh', color)} onClick={() => setColor('pu-erh')} >\n                <span className=\"text\">\n                    Pu-erh\n                </span>\n            </button>\n            <button className={colorClass('black', color)} onClick={() => setColor('black')} >\n                <span className=\"text\">\n                    Black\n                </span>\n            </button>\n            <button className={colorClass('oolong', color)} onClick={() => setColor('oolong')}>\n                <span className=\"text\">\n                    <span className=\"olong\">\n                        {/* <span className=\"big-O\">\n                            O\n                        <span className=\"o\">o</span>\n                        </span>\n                        long */}\n                        <span className=\"oo\">Oo</span>long\n                    </span>\n                </span>\n            </button>\n            <button className={colorClass('green', color)} onClick={() => setColor('green')}>\n                <span className=\"text\">\n                    Green\n                </span>\n            </button>\n            <button className={colorClass('white', color)} onClick={() => setColor('white')}>\n                <span className=\"text\">\n                    White\n                </span>\n            </button>\n        </section>\n    );\n}\n\n","import { useRecoilState } from 'recoil';\nimport { selectedState, temperatureState, temperatureUnitState } from '../App';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Temperature.scss';\n\nexport const Temperature = () => {\n    const [temperature, setTemperature] = useRecoilState(temperatureState);\n    const [temperatureUnit, setTemperatureUnit] = useRecoilState(temperatureUnitState);\n    const [selected, setSelected] = useRecoilState(selectedState);\n\n    const fClasses = cls([\n        'amount-label',\n        'fahrenheit',\n        temperatureUnit === 'F' ? 'active' : '',\n    ]);\n    const cClasses = cls([\n        'amount-label',\n        'celsius',\n        temperatureUnit === 'C' ? 'active' : '',\n    ]);\n    const classes = cls([\n        'temperature',\n        selected === 'temperature' ? 'selected' : '',\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('temperature');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--temperature\"\n                value={temperature}\n                onClick={onClick}\n                onChange={(e) => setTemperature(parseAmountInput(212, e))} />\n            <div className=\"value\">\n                <div className=\"circle\">\n                    <h2 className=\"amount\">{temperature}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={fClasses} onClick={() => setTemperatureUnit(\"F\")}>°F</button>\n                <button className={cClasses} onClick={() => setTemperatureUnit('C')}>°C</button>\n            </div>\n        </section>\n    );\n}","import { useRecoilState } from 'recoil';\nimport { selectedState, timeState } from '../App';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Timer.scss'\n\n\nconst minSec = (time: number): number[] => {\n    const min = Math.floor(time / 60);\n    const sec = time - (min * 60);\n    return [min, sec];\n}\n\nconst valueNodes = (x: number) => {\n    x = x < 0 ? 0 : x;\n    const str = x < 10 ? `0${x}` : `${x}`;\n    return str\n        .split('')\n        .map((c: string, i: number) => (\n            <h2 key={`${i}-${c}`} className=\"value\">{c}</h2>\n        ));\n}\n\ninterface TimerProps {\n    time: number\n    setTime: any\n    selected: string\n    setSelected: any\n}\n\nexport const Timer = () => {\n    const [time, setTime] = useRecoilState(timeState);\n    const [selected, setSelected] = useRecoilState(selectedState);\n\n    const [min, sec] = minSec(time);\n    const setMinutes = (newMin: number) => {\n        const t = (newMin * 60) + sec;\n        setTime(t);\n    }\n    const setSeconds = (newSec: number) => {\n        const t = (min * 60) + newSec;\n        setTime(t);\n    }\n\n    const $min = valueNodes(min);\n    const $sec = valueNodes(sec);\n    const classes = cls([\n        'timer',\n        selected === 'minutes' ? 'selected-min' : '',\n        selected === 'seconds' ? 'selected-sec' : ''\n    ])\n\n    const onClickMinutes = (e: any) => {\n        scrollInput(e);\n        setSelected('minutes');\n    }\n\n    const onClickSeconds = (e: any) => {\n        scrollInput(e);\n        setSelected('seconds');\n    }\n    return (\n        <section className={classes} >\n            <section className=\"capsule min\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={min}\n                    onClick={onClickMinutes}\n                    onChange={(e) => setMinutes(parseAmountInput(9, e))} />\n                <label className=\"label\">\n                    min\n                </label>\n                <div className=\"values\">\n                    {$min}\n                </div>\n            </section>\n\n            <section className=\"capsule sec\">\n                <input\n                    type=\"tel\"\n                    className=\"input--timer\"\n                    value={sec}\n                    onClick={onClickSeconds}\n                    onChange={(e) => setSeconds(parseAmountInput(59, e))} />\n                <label className=\"label\">\n                    sec\n                </label>\n                <div className=\"values\">\n                    {$sec}\n                </div>\n            </section>\n        </section>\n    );\n}","import { useRecoilState } from 'recoil';\nimport { selectedState } from '../App';\nimport { cls } from '../utils';\nimport './Name.scss';\n\ninterface NameProps {\n    name: string,\n    setName: any,\n}\n\nexport const Name = ({ name, setName }: NameProps) => {\n    const [selected, setSelected] = useRecoilState(selectedState);\n    const start = name === 'Tea';\n    const classes = cls([\n        'f-cc',\n        'name',\n        selected === 'name' ? 'selected' : '',\n        start ? 'start' : ''\n    ]);\n\n    const onClick = () => {\n        setSelected('name');\n    }\n\n    return (\n        <section className={classes}>\n            <input\n                type=\"text\"\n                className=\"input--text\"\n                placeholder=\"Tea\"\n                value={name}\n                onClick={onClick}\n                onChange={(e) => {\n                    let val = e.currentTarget.value;\n                    if (start) {\n                        val = val.replace('Tea', '');\n                    }\n                    setName(val);\n                }} />\n            <h1 className=\"name__name\">{name}</h1>\n        </section>\n    );\n}","import { cls } from '../utils';\nimport './Overlay.scss';\n\ninterface OverlayProps {\n    isDone: boolean,\n    isOut: boolean,\n    clearOverlay: any\n}\n\nexport const Overlay = ({ isDone, isOut, clearOverlay }: OverlayProps) => {\n    const overlayClasses = cls([\n        'overlay',\n        isDone ? 'done' : '',\n        isOut ? 'out' : '',\n    ]);\n    return (\n        <div onClick={clearOverlay} className={overlayClasses}></div>\n    );\n}","import { useRecoilState } from 'recoil';\nimport { weightState, weightUnitState, selectedState } from '../App';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Weight.scss';\n\ninterface WeightProps {\n    weight: number;\n    setWeight: any;\n    isMass: boolean;\n    setIsMass: any;\n    selected: string;\n    setSelected: any;\n}\n\nexport const Weight = () => {\n    const [weight, setWeight] = useRecoilState(weightState);\n    const [weightUnit, setWeightUnit] = useRecoilState(weightUnitState);\n    const [selected, setSelected] = useRecoilState(selectedState);\n\n\n    const tspClasses = cls([\n        'amount-label',\n        'tsp',\n        weightUnit === 'tsp' ? 'active' : '',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        weightUnit === 'g' ? 'active' : '',\n    ]);\n\n    const classes = cls([\n        'weight',\n        selected === 'weight' ? 'selected' : ''\n    ]);\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('weight');\n    }\n\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--weight\"\n                value={weight}\n                onClick={onClick}\n                onChange={(e) => setWeight(parseAmountInput(33, e))} />\n            <div className=\"diamond\">\n                <button className={tspClasses} onClick={() => setWeightUnit('tsp')}>tsp</button>\n                <h2 className=\"value\">{weight}</h2>\n                <button className={gClasses} onClick={() => setWeightUnit('g')}>g</button>\n            </div>\n        </section>\n    );\n}","import { selector, useRecoilState, useRecoilValue } from 'recoil';\nimport { selectedState, waterState, waterUnitState } from '../App';\nimport { cls, parseAmountInput, scrollInput } from '../utils';\nimport './Water.scss';\n\ninterface WaterProps {\n    water: number\n    setWater: any\n    isMass: boolean\n    setIsMass: any\n    selected: string\n    setSelected: any\n}\n\nconst isMassState = selector({\n    key: 'waterUnit',\n    get: ({ get }) => {\n        const unit = get(waterUnitState);\n        return unit === 'g';\n    }\n})\n\nexport const Water = () => {\n    const [water, setWater] = useRecoilState(waterState);\n    const [selected, setSelected] = useRecoilState(selectedState);\n    const [_, setWaterUnit] = useRecoilState(waterUnitState);\n    const isMass = useRecoilValue(isMassState);\n\n    const ozClasses = cls([\n        'amount-label',\n        'oz',\n        isMass ? '' : 'active',\n    ]);\n    const gClasses = cls([\n        'amount-label',\n        'g',\n        isMass ? 'active' : '',\n    ]);\n    const classes = cls([\n        'water',\n        selected === 'water' ? 'selected' : ''\n    ])\n\n    const onClick = (e: any) => {\n        scrollInput(e);\n        setSelected('water');\n    }\n    return (\n        <section className={classes} >\n            <input\n                type=\"tel\"\n                className=\"input--water glass\"\n                value={water}\n                onClick={onClick}\n                onChange={(e) => setWater(parseAmountInput(999, e))} />\n            <div className=\"value\">\n                <div className=\"glass\">\n                    <h2 className=\"amount\">{water}</h2>\n                </div>\n            </div>\n            <div className=\"label\">\n                <button className={ozClasses} onClick={() => setWaterUnit('oz')}>oz</button>\n                <button className={gClasses} onClick={() => setWaterUnit('g')}>ml</button>\n            </div>\n        </section>\n    );\n}","import React from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\n\ninterface DrawProps {\n    start: any;\n    back: any;\n    id: string;\n    label: string;\n    isDone: boolean;\n}\n\nconst CX = 360;\nconst CY = 315;\nconst C_MARGIN_TOP = 100;\nconst CT = CY + C_MARGIN_TOP;\nconst BUTTON_WIDTH = 10;\nconst BUTTON_TOP_MARGIN = 30;\nconst BUTTON_TOP = CT + BUTTON_TOP_MARGIN;\n\nlet p6: any;\n\nexport const Draw: React.FC<DrawProps> = (props: DrawProps) => {\n    const { id, label } = props;\n    const filename = `${label}.png`;\n\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\n        p6 = p5;\n        const canvas = p5.createCanvas(CX, CY).parent(canvasParentRef);\n        p5.frameRate(120);\n        p5.strokeWeight(5);\n        p5.stroke('#26906D');\n\n        p5.clear();\n\n        const clear = p5.createButton('clear');\n        clear.parent(canvasParentRef);\n        clear.position(CX - BUTTON_WIDTH, BUTTON_TOP);\n        clear.mousePressed(() => p5.clear());\n\n        const back = p5.createButton('back');\n        back.parent(canvasParentRef);\n        back.position(CX - BUTTON_WIDTH, BUTTON_TOP + 90);\n        back.mousePressed(() => props.back());\n\n        const save = p5.createButton('save');\n        save.parent(canvasParentRef);\n        save.position(50, BUTTON_TOP);\n        save.mousePressed(() => {\n            const image = p5.save(canvas, filename);\n            console.log(image);\n            props.back();\n        });\n\n        props.start()\n    };\n\n    const mouseDragged = (p5: p5Types) => {\n        p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\n    }\n\n    const touchMoved = (p5: p5Types) => {\n        p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\n    }\n\n\n    return (\n        <>\n            <Sketch setup={setup} touchMoved={touchMoved} mouseDragged={mouseDragged} />\n            <p className=\"subject\">Draw {label}</p>\n        </>\n    );\n}","import React from 'react';\n\nexport interface BrewSessionType {\n    brewNumber: number;\n    time: number;\n    temperature: number;\n    temperatureUnit: string;\n    water: number;\n    waterUnit: string;\n    weight: number;\n    weightUnit: string;\n}\n\ninterface BrewSessionProps {\n    // sessionId: string;\n    brew: BrewSessionType;\n}\n\nexport const mockBrews = [\n    {\n        brewNumber: 1,\n        time: 15,\n        temperature: 195,\n        temperatureUnit: '°F',\n        water: 120,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n    {\n        brewNumber: 2,\n        time: 30,\n        temperature: 195,\n        temperatureUnit: 'F',\n        water: 110,\n        waterUnit: 'g',\n        mass: 9,\n        massUnit: 'g',\n    },\n];\n\n\nconst datum = (amount: number, unit: string) => {\n    if (!amount) {\n        return (<span>-</span>);\n    }\n    return (\n        <>\n            {amount}\n            <span className=\"unit\">{unit}</span>\n        </>\n    );\n}\n\nexport const BrewSession = ({ brew }: BrewSessionProps) => {\n    const { brewNumber, time, temperature, water, weight, temperatureUnit, waterUnit, weightUnit } = brew;\n    return (\n        <div className=\"brew-session\">\n            <span className=\"session-brew-number\">{brewNumber}</span>\n            <span className=\"session-time\">\n                {datum(time, 's')}\n            </span>\n            <span className=\"session-weight\">\n                {datum(weight, weightUnit)}\n            </span>\n            <span className=\"session-temperature\">\n                {datum(temperature, `°${temperatureUnit}`)}\n            </span>\n            <span className=\"session-water\">\n                {datum(water, waterUnit)}\n            </span>\n        </div>\n    );\n};\n","import React from 'react';\nimport { BrewSession, BrewSessionType, mockBrews } from \"./BrewSession\";\nimport './Sessions.scss';\n\nexport interface TeaSession {\n    id: number;\n    name: string;\n    color: string;\n    brews: BrewSessionType[];\n}\n\ninterface TeaSessionProps {\n    session: TeaSession;\n}\n\nexport const mockTeaSession = {\n    id: 1,\n    name: 'Hairy Crab',\n    color: 'oolong',\n    brews: mockBrews,\n}\n\n\nexport const TeaSession = ({ session }: TeaSessionProps) => {\n    const { id: _id, name, color, brews } = session;\n    const id = _id.toString().padStart(3, '0');\n    const $brews = brews.map(b => <BrewSession key={`${id}-${b.brewNumber}`} brew={b} />);\n    return (\n        <article className=\"tea-session\">\n            <div className=\"header\">\n                <span>\n                    <span className=\"name\">\n                        {name === 'Tea' ? <span className=\"mystery\">???</span> : name}\n                    </span>{color ? '-' : null} {color}\n                </span>\n                <span className=\"id\">\n                    <span className=\"light\">(</span>\n                    {id}\n                    <span className=\"light\">)</span>\n                </span>\n            </div>\n            <div className=\"labels\">\n                <span className=\"labels-brew-number\">brew</span>\n                <span>time</span>\n                <span>weight</span>\n                <span>temperature</span>\n                <span>water</span>\n            </div>\n            {$brews}\n        </article>\n    );\n};\n","import { TeaSession } from \"./TeaSession\";\nimport { BrewSessionType } from \"./BrewSession\";\n\nconst key = 'sessions';\n\nconst emptySessions = [\n    {\n        id: 1,\n        name: '',\n        color: '',\n        brews: [],\n    }\n\n]\n\nfunction init() {\n    const json = JSON.stringify(emptySessions);\n    localStorage.setItem(key, json)\n    return json;\n}\n\nexport function getSessions(): TeaSession[] {\n    const json = localStorage.getItem(key) || init();\n    const sessions = JSON.parse(json);\n    return sessions;\n}\n\nexport function getLastSession(): TeaSession {\n    const json = localStorage.getItem(key) || init();\n    const sessions = JSON.parse(json);\n    return sessions.pop();\n}\n\nexport function newSession(tea: TeaSessionCurrent): TeaSession[] {\n    const previous = getSessions();\n    const teaSession = {\n        ...tea,\n        brews: [],\n    }\n    const sessions = [teaSession, ...previous];\n    return set(sessions);\n}\n\nfunction set(sessions: TeaSession[]): TeaSession[] {\n    const sessionsJSON = JSON.stringify(sessions);\n    localStorage.setItem(key, sessionsJSON);\n    return sessions;\n}\n\nexport function storeSession(current: TeaSessionCurrent): TeaSession {\n    const sessions = getSessions();\n    const brews = getSessionBrews(current);\n    const session = {\n        ...current,\n        brews\n    };\n    sessions[current.id - 1] = session;\n    const sessionsJSON = JSON.stringify(sessions);\n    localStorage.setItem(key, sessionsJSON);\n    return session;\n}\n\nexport function storeBrew(current: TeaSessionCurrent, brew: BrewSessionType): TeaSession {\n    const sessions = getSessions();\n    const i = current.id - 1;\n    const session = sessions[i];\n\n    const bi = brew.brewNumber - 1\n    session.brews[bi] = brew;\n    sessions[i] = session;\n    set(sessions);\n\n    return session;\n}\n\nfunction getSessionBrews(current: TeaSessionCurrent) {\n    const sessions = getSessions();\n    const i = current.id - 1;\n    const brews = sessions[i]?.brews || [];\n    return brews;\n}\n\nexport function clearSessions() {\n    localStorage.removeItem(key);\n}\n\n\ntype TeaSessionCurrent = Pick<TeaSession, 'id' | 'name' | 'color'>;","import React from 'react';\nimport './History.scss';\nimport { mockTeaSession, TeaSession } from '../Sessions/TeaSession';\nimport { clearSessions, getSessions } from '../Sessions';\n\ninterface HistoryProps {\n    // sessions: TeaSession[];\n    onBack: any;\n}\n\nexport const mockHistory = {\n    sessions: [\n        {\n            ...mockTeaSession,\n            id: 2,\n            name: 'Mao Feng',\n            color: 'black'\n        },\n        mockTeaSession,\n    ]\n}\n\n\nexport const History = ({ onBack }: HistoryProps) => {\n    const sessions = getSessions();\n    const $entries = sessions.sort((a, b) => b.id - a.id).map(e => <TeaSession key={e.id} session={e} />);\n    const confirmClear = () => {\n        const clear = window.confirm('really?');\n        if (clear) {\n            clearSessions();\n            onBack()\n        }\n    }\n    return (\n        <article className=\"history\">\n            <section className=\"controls\">\n                <button className=\"back\" onClick={onBack}>\n                    <span> now </span>\n                </button>\n                <button onClick={confirmClear}>\n                    <span> clear </span>\n                </button>\n            </section>\n            <div className=\"gap\"></div>\n            <section className=\"sessions\">\n                {$entries}\n            </section>\n        </article>\n    );\n}","const nouns = [\n    'apple',\n    'frog',\n    'tree',\n    'cylinder',\n    'cactus',\n    'rock',\n    'pilot',\n    'pencil',\n    'river',\n    'breakfast',\n    'camera',\n    'candle',\n    'machine',\n    'dream',\n]\n\nconst adjectives = [\n    'calm',\n    'happy',\n    'long',\n    'beautiful',\n    'lazy',\n    'polite',\n    'repressed',\n    'unkempt',\n    'clean',\n    'evil',\n    'frail',\n    'modern',\n    'wild'\n]\n\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\nexport const getLabel = (sessionNumber: number, brewNumber: number) => {\n    const noun = nouns[brewNumber % nouns.length];\n    const adjective = adjectives[(sessionNumber + brewNumber) % adjectives.length];\n    const article = vowels.includes(adjective[0]) ? 'an' : 'a';\n    return `${article} ${adjective} ${noun}`;\n}","import { useEffect, useState } from 'react';\nimport { RecoilRoot, atom, selector, useRecoilState, useRecoilValue } from 'recoil';\n\nimport { Brew } from './Brew';\nimport { Controls } from './Controls';\nimport { Color } from './Color';\nimport { Temperature } from './Temperature';\nimport { Timer } from './Timer';\nimport { Name } from './Name';\nimport { Overlay } from './Overlay';\nimport { Weight } from './Weight';\nimport { Water } from './Water';\nimport { Draw } from './Draw';\n\nimport { History } from './History';\nimport { getLastSession, storeSession, storeBrew } from './Sessions';\nimport { getLabel } from './Label';\n\nimport './App.scss';\nimport { cls } from './utils';\n\nconst isPWA = () => (window.matchMedia('(display-mode: standalone)').matches) || ((window.navigator as any).standalone) || document.referrer.includes('android-app://');\nconst lastTea = getLastSession();\nconst lastBrew = lastTea.brews[lastTea.brews.length - 1] || {};\nconst nextBrewTime = (t: number) => t + 15;\n\n\nconst idState = atom({\n  key: 'idState',\n  default: lastTea.id,\n})\n\nexport const colorState = atom({\n  key: 'colorState',\n  default: lastTea.color || '',\n})\n\nexport const selectedState = atom({\n  key: 'selectedState',\n  default: '',\n});\n\nexport const temperatureState = atom({\n  key: 'temperatureState',\n  default: lastBrew.temperature || 0,\n});\n\nexport const temperatureUnitState = atom({\n  key: 'temperatureUnitState',\n  default: lastBrew.temperatureUnit || 'F',\n});\n\nexport const weightState = atom({\n  key: 'weightState',\n  default: lastBrew.weight || 0,\n});\n\nexport const weightUnitState = atom({\n  key: 'weightUnitState',\n  default: lastBrew.weightUnit || 'g',\n});\n\nexport const waterState = atom({\n  key: 'waterState',\n  default: lastBrew.water || 0,\n});\n\nexport const waterUnitState = atom({\n  key: 'waterUnitState',\n  default: lastBrew.waterUnit || 'g',\n});\n\nexport const timeState = atom({\n  key: 'timeState',\n  default: lastBrew.time || nextBrewTime(0),\n});\n\nexport const lastTimeState = atom({\n  key: 'lastTimeState',\n  default: lastBrew.time || nextBrewTime(0),\n});\n\nexport const nameState = atom({\n  key: 'nameState',\n  default: lastTea.name || 'Tea',\n});\n\nexport const brewNumberState = atom({\n  key: 'brewNumberState',\n  default: lastBrew.brewNumber || 0,\n});\n\nexport const pageState = atom({\n  key: 'pageState',\n  default: \"main\",\n});\n\nexport const isTickingState = atom({\n  key: 'isTickingState',\n  default: false,\n});\n\n\nfunction App() {\n  const [id, setId] = useRecoilState(idState);\n\n  const [name, setName] = useRecoilState(nameState);\n  const [color, setColor] = useRecoilState(colorState);\n  const [brewNumber, _setBrew] = useRecoilState(brewNumberState);\n\n  const [temperature, setTemperature] = useRecoilState(temperatureState);\n  const [temperatureUnit] = useRecoilState(temperatureUnitState);\n\n  const [water, setWater] = useRecoilState(waterState);\n  const [waterUnit] = useRecoilState(waterUnitState);\n\n  const [weight, setWeight] = useRecoilState(weightState);\n  const [weightUnit] = useRecoilState(weightUnitState);\n\n  const [time, setTime] = useRecoilState(timeState);\n  const [lastTime, setLastTime] = useRecoilState(lastTimeState);\n\n  const [page, setPage] = useRecoilState(pageState);\n  const [selected, setSelected] = useRecoilState(selectedState);\n\n  const [isTicking, setIsTicking] = useRecoilState(isTickingState);\n\n  const [autoBrewTime, setAutoBrewTime] = useState(true);\n  const [isDone, setIsDone] = useState(false);\n  const [isOut, setIsOut] = useState(false);\n\n  const brew = {\n    brewNumber,\n    time: lastTime,\n    temperature,\n    weight,\n    water,\n    temperatureUnit,\n    waterUnit,\n    weightUnit,\n  }\n\n  const session = {\n    id,\n    name,\n    color,\n  }\n\n\n  const onOld = () => {\n    if (id === 1 && brewNumber === 0) {\n      return;\n    }\n    setPage('history');\n  }\n\n  const onBack = () => {\n    setPage('main');\n  }\n\n  const reset = () => {\n    setName('Tea');\n    setColor('');\n    setSelected('');\n    setBrew(0);\n    setWater(0);\n    setTemperature(0);\n    setWeight(0);\n    setTime(autoBrewTime ? nextBrewTime(0) : 0);\n    setIsDone(false);\n    setIsTicking(false);\n    setIsOut(false);\n    setId(id + 1);\n  }\n\n  const setBrew = (count: number) => {\n    setIsTicking(!isTicking)\n    setIsDone(false);\n    setIsOut(false);\n    if (autoBrewTime) {\n      setLastTime(nextBrewTime(time));\n    }\n    return _setBrew(count);\n  }\n\n  const startBrewing = () => {\n    if (!isTicking) {\n      setSelected('brew');\n      const nextNumber = brewNumber + 1;\n      setBrew(nextNumber);\n    }\n    setPage('draw');\n  }\n\n\n  const tick = () => {\n    if (!isTicking) {\n      return () => { };\n    }\n    const timer = setTimeout(() => {\n      setTime(time - 1);\n      if (time <= 0) {\n        setIsTicking(false);\n        setIsDone(true);\n        setTime(0);\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    }\n\n  }\n  useEffect(() => {\n    tick();\n  }, [isTicking, time]);\n\n  const removeOverlay = () => {\n    if (isDone && isOut) {\n      setTimeout(() => {\n        setIsDone(false)\n        setSelected('overlay')\n      }, 200);\n    }\n  }\n  useEffect(() => {\n    removeOverlay()\n  }, [isDone, isOut]);\n\n\n  const store = () => {\n    if (brewNumber === 0) {\n      return;\n    }\n    storeSession(session);\n    storeBrew(session, brew);\n  }\n  useEffect(() => {\n    store();\n  }, [brewNumber]);\n\n\n  const classes = cls([\n    'main',\n    isPWA() ? 'pwa' : '',\n    selected ? 'selecting' : '',\n  ]);\n\n  const clearOverlay = () => {\n    setIsOut(true);\n    setTime(lastTime);\n  }\n\n  if (page === 'history') {\n\n    return (\n      <main>\n        <History onBack={onBack} />\n        <Overlay isDone={isDone} isOut={isOut} clearOverlay={clearOverlay} />\n      </main>\n    );\n  }\n\n\n  if (page === 'draw') {\n    const label = getLabel(id, brewNumber);\n\n    return (\n      <main className=\"draw\">\n        <article>\n          <Draw\n            start={() => { }}\n            back={() => setPage('main')}\n            isDone={isDone}\n            label={label}\n            id={`${id}-${brewNumber}`}\n          />\n          <Timer />\n          <Overlay isDone={isDone} isOut={isOut} clearOverlay={clearOverlay} />\n        </article>\n      </main>\n    );\n  };\n\n  return (\n    <main >\n      <article className={classes}>\n        <p className=\"pwa\">\n          {isPWA() ? 'pwa' : 'web'}\n        </p>\n        <Controls onOld={onOld} onNew={reset} />\n        <Name name={name} setName={setName} />\n\n        <Temperature />\n        <Color />\n\n        <Weight />\n        <Water />\n\n        <Timer />\n        <Brew onClick={startBrewing} />\n        <div className=\"sip\">sip</div>\n      </article>\n\n      <Overlay isDone={isDone} isOut={isOut} clearOverlay={clearOverlay} />\n    </main>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}